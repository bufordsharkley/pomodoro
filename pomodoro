#! /usr/bin/env python3

import argparse
import contextlib
import datetime
import os
import time
import sys
import random

import base


def main(args):
  todos = []
  with pomodoro_lock():
    if len(args) > 1:
      if args[1] == 'start':
        start()
      if args[1] == 'end':
        end(todos)
    while True:
      try:
        now = datetime.datetime.now()
        if now.minute % 30 < 3:  # in case it runs late for some reason
          try:
            todo = demand_wind_up(timeout=2*60)
            if todo is None:
              continue
            now = datetime.datetime.now()
            minutes_to_work = calculate_work_minutes(now)
            todos.append(todo)
            do_work(minutes_to_work * 60)
            do_not_work((30 - minutes_to_work) * 60)
          except TimeoutException:
            pass
        else:
          if not now.second:
            print('waiting')
          time.sleep(1)
      except KeyboardInterrupt:
        end(todos)


@contextlib.contextmanager
def pomodoro_lock():
  lock_path = '/tmp/pomodoro'
  if os.path.exists(lock_path):
    raise RuntimeError('Currently locked')
  with open(lock_path, 'w') as f:
    f.write(str(os.getpid()))
  try:
    yield
  finally:
    os.remove(lock_path)


def run_pomodoro_forever():
  pom = base.Pomodoro()
  pom.run_forever()


if __name__ == "__main__":
  #with pomodoro_lock():
  run_pomodoro_forever()
